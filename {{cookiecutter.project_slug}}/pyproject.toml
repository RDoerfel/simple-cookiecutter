[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "0.1.0"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]
readme = "README.md"
packages = [{include = "{{cookiecutter.package_name}}"}]

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"

[tool.poetry.group.dev.dependencies]
{% if cookiecutter.use_pytest == 'y' -%}
pytest = "^7.4.0"
{% endif -%}
{% if cookiecutter.use_coverage == 'y' -%}
pytest-cov = "^4.1.0"
{% endif -%}
{% if cookiecutter.use_black == 'y' -%}
black = "^23.7.0"
{% endif -%}
{% if cookiecutter.use_mypy == 'y' -%}
mypy = "^1.5.0"
{% endif -%}
{% if cookiecutter.use_flake8 == 'y' -%}
flake8 = "^6.1.0"
{% endif -%}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

{% if cookiecutter.use_black == 'y' -%}
[tool.black]
line-length = 88
target-version = ["py{{cookiecutter.python_version|replace('.', '')}}"]
{% endif -%}

{% if cookiecutter.use_mypy == 'y' -%}
[tool.mypy]
python_version = "{{cookiecutter.python_version}}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
{% endif -%}

{% if cookiecutter.use_coverage == 'y' -%}
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--cov={{cookiecutter.package_name}} --cov-report=term-missing --cov-report=xml --cov-report=html"

[tool.coverage.run]
source = ["{{cookiecutter.package_name}}"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
{% endif -%}